const jwt = require('jsonwebtoken')
const { isGuid } = require('is-guid')

exports.verifyPassportJWT = function(req, res, next, gatewayPublicKey) {
    // check 'passport-meta-jwt' has been provided
    if(! req.headers['passport-meta-jwt']) {
        return res.status(401).send(`Application JWT error. JWT required.`)
    }

    const tokenClaims = {
        maxAge: '5 minutes',
        issuer: 'passport-api-gateway',
    }

    // verify JWT
    try {
        req.decodedToken = jwt.verify(req.headers['passport-meta-jwt'], gatewayPublicKey, tokenClaims)
    } catch(error) {
        return res.status(401).send(`Application JWT error. Passport JWT verification error.`)
    }

    req.passportMeta = req.decodedToken.payload

    // validate ConsumerID, ContactFK and ConsumerType
    if(! req.passportMeta.ConsumerID || ! req.passportMeta.ContactFK || ! req.passportMeta.ConsumerType) {
        return res.status(401).send(`Application authentication error. Passport metadata missing or invalid.`)
    }

    // validate ConsumerID UUID
    if(! isGuid(req.passportMeta.ConsumerID)) {
        return res.status(401).send(`Application authentication error. Passport ConsumerID UUID invalid.`)
    }

    // validate ContactFK UUID
    if(! isGuid(req.passportMeta.ContactFK)) {
        return res.status(401).send(`Application authentication error. Passport ContactFK UUID invalid.`)
    }

    next()
}

exports.validatePassportJWT = function(req, res, next, gatewayPublicKey) {
    // check 'passport-meta-jwt' has been provided
    if(! req.headers['passport-meta-jwt']) {
        return res.status(401).send(`Application JWT error. JWT required.`)
    }

    const tokenClaims = {
        maxAge: '5 minutes',
        issuer: 'passport-api-gateway',
    }

    // verify JWT
    try {
        req.decodedToken = jwt.verify(req.headers['passport-meta-jwt'], gatewayPublicKey, tokenClaims)
    } catch(error) {
        return res.status(401).send(`Application JWT error. Passport JWT verification error.`)
    }

    req.passportMeta = req.decodedToken.payload

    next()
}